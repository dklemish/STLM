cor(test[,2], test[,22])
X[1,]
X[21,]
X[22,]
cone.corr(5, 5, 1)
X <- matrix(1:4, ncol=1)
X <- matrix(1:4, ncol=1)
a <- 2
b <- 1
b <- 0.5
eps <- 1e-3
R <- 1
nSpatial <- 3 # mass value, x, h
nLoc <- nrow(X)
mult <- 1000
mass.pts <- matrix(0, nrow=mult*nLoc, ncol=nSpatial)
num.added <- rep(0, nLoc)
total.mass.pts <- 0
levy.draws <- drawGamma(10, a, b, eps)
num.draws <- sum(levy.draws > 0)
num.draws.pos <- rbinom(num.draws, 1, 0.5)
draw.loc    <- rep(0, num.draws)
draw.loc[num.draws.pos == 0] <- (X[1] - R) + R*rbeta(num.draws - sum(num.draws.pos), 2, 1)
draw.loc[num.draws.pos == 1] <- X[1] + R*rbeta(sum(num.draws.pos), 1, 2)
draw.height <- runif(num.draws, 0, (R - abs(draw.loc - X[1])) / R^2)
draw.loc
draw.height
mass.pts[(total.mass.pts+1):(total.mass.pts+num.draws), 1] <- levy.draws[1:num.draws]
mass.pts[(total.mass.pts+1):(total.mass.pts+num.draws), 2] <- draw.loc
mass.pts[(total.mass.pts+1):(total.mass.pts+num.draws), 3] <- draw.height
num.added[1] <- num.draws
total.mass.pts <- total.mass.pts + num.draws
i <- 2
levy.draws <- drawGamma(10, a, b, eps)
num.draws  <- sum(levy.draws > 0)
draw.loc    <- rep(0, num.draws)
num.draws.pos <- rbinom(num.draws, 1, 0.5)
draw.loc[num.draws.pos == 0] <- (X[i] - R) + R*rbeta(num.draws - sum(num.draws.pos), 2, 1)
draw.loc[num.draws.pos == 1] <- X[i] + R*rbeta(sum(num.draws.pos), 1, 2)
draw.height <- runif(num.draws, 0, (R - abs(draw.loc - X[i,1])) / R^2)
valid.new.pt <- rep(TRUE, num.draws)
for(j in 1:(i-1)){
valid.new.pt <- valid.new.pt &
(abs(X[j,1] - draw.loc) > R) &
(draw.height > (R-abs(draw.loc - X[j,1]))/R^2)
}
valid.new.pt
draw.loc
draw.height
draw.loc
draw.height
(abs(X[j,1] - draw.loc) > R)
abs(X[j,1] - draw.loc
)
cone_height <- function(d, R, dimension){
if(dimension == 1){
return(abs(R-d)/R^2)
}
else{
print("Not implemented yet!")
}
}
cone_height(1,2,1)
cone_height(1.9,2,1)
cone_height(0,2,1)
cone_height(-1,2,1)
cone_height1D <- function(d, R, dimension){
return(R-abs(d)/R^2)
}
cone_height1D(1,2,1)
cone_height1D <- function(d, R, dimension){
return((R-abs(d))/R^2)
}
cone_height1D(1,2,1)
cone_height1D(-1,2,1)
cone_height1D(1.99,2,1)
cone_height1D(-1.99,2,1)
cone_height1D(-1.9999,2,1)
cone_height1D(1.9999,2,1)
cone_height1D(0.01,2,1)
cone_height1D(-0.01,2,1)
cone_height1D <- function(d, R){
return((R-abs(d))/R^2)
}
X
nSpatial <- 3 # mass value, x, h
nLoc <- nrow(X)
mult <- 1000
# Storage for Levy mass "jumps"
mass.pts <- matrix(0, nrow=mult*nLoc, ncol=nSpatial)
num.added <- rep(0, nLoc)
total.mass.pts <- 0
# Draw mass points for first location
levy.draws <- drawGamma(10, a, b, eps)
num.draws <- sum(levy.draws > 0)
num.draws.pos <- rbinom(num.draws, 1, 0.5)
draw.loc    <- rep(0, num.draws)
draw.loc[num.draws.pos == 0] <- (X[1] - R) + R*rbeta(num.draws - sum(num.draws.pos), 2, 1)
draw.loc[num.draws.pos == 1] <- X[1] + R*rbeta(sum(num.draws.pos), 1, 2)
draw.height <- runif(num.draws, 0, (R - abs(draw.loc - X[1])) / R^2)
mass.pts[(total.mass.pts+1):(total.mass.pts+num.draws), 1] <- levy.draws[1:num.draws]
mass.pts[(total.mass.pts+1):(total.mass.pts+num.draws), 2] <- draw.loc
mass.pts[(total.mass.pts+1):(total.mass.pts+num.draws), 3] <- draw.height
num.added[1] <- num.draws
total.mass.pts <- total.mass.pts + num.draws
for(i in 2:nLoc){
# Draw mass points for other locations, but discard points that fall
# in the regions of previous locations
levy.draws <- drawGamma(10, a, b, eps)
num.draws  <- sum(levy.draws > 0)
draw.loc    <- rep(0, num.draws)
num.draws.pos <- rbinom(num.draws, 1, 0.5)
draw.loc[num.draws.pos == 0] <- (X[i] - R) + R*rbeta(num.draws - sum(num.draws.pos), 2, 1)
draw.loc[num.draws.pos == 1] <- X[i] + R*rbeta(sum(num.draws.pos), 1, 2)
draw.height <- runif(num.draws, 0, (R - abs(draw.loc - X[i,1])) / R^2)
valid.new.pt <- rep(TRUE, num.draws)
# Check previous locations whether new mass positions fall in those location's shapes
for(j in 1:(i-1)){
valid.new.pt <- valid.new.pt &
# (abs(X[j,1] - draw.loc) > R) &
# (draw.height > (R-abs(draw.loc - X[j,1]))/R^2)
(draw.height > cone_height1D(draw.loc - X[j,1], R))
}
num.new <- sum(valid.new.pt)
num.added[i] <- num.new
if(num.new > 0){
mass.pts[(total.mass.pts+1):(total.mass.pts+num.new), 1] <- levy.draws[1:num.draws][valid.new.pt]
mass.pts[(total.mass.pts+1):(total.mass.pts+num.new), 2] <- draw.loc[valid.new.pt]
mass.pts[(total.mass.pts+1):(total.mass.pts+num.new), 3] <- draw.height[valid.new.pt]
total.mass.pts <- total.mass.pts + num.new
}
}
mass.pts <- mass.pts[1:total.mass.pts, ]
mass.pts
junk <- data.frame(mass.pts)
junk
junk$type <- as.factor(
c(rep(1, num.added[1]),
rep(2, num.added[2]),
rep(3, num.added[3]),
rep(4, num.added[4])))
junk
ggplot(data=junk, aes(x=X2, y=X3)) +
geom_point(aes(color=type))
ggplot(data=junk, aes(x=X2, y=X3)) +
geom_point(aes(color=type)) +
geom_segment(aes(x=0, y = 0, xend=1, yend=1), color="red")
ggplot(data=junk, aes(x=X2, y=X3)) +
geom_point(aes(color=type)) +
geom_segment(aes(x=0, y = 0, xend=1, yend=1), color="red") +
geom_segment(aes(x=1, y = 1, xend=2, yend=0), color="red") +
geom_segment(aes(x=1, y = 0, xend=2, yend=1), color="green") +
geom_segment(aes(x=2, y = 1, xend=3, yend=0), color="green") +
geom_segment(aes(x=2, y = 0, xend=3, yend=1), color="blue") +
geom_segment(aes(x=3, y = 1, xend=4, yend=0), color="blue") +
geom_segment(aes(x=3, y = 0, xend=4, yend=1), color="purple") +
geom_segment(aes(x=4, y = 1, xend=5, yend=0), color="purple")
library(STLM)
X <- matrix(seq(0, 20, by=0.25), ncol=1)
test <- matrix(0, nrow=10000, ncol=81)
for(i in 1:10000){
test[i,] <- drawGammaRF_R(X, 2, 0.5, 5e-4, 5, sd=i)
}
cone.corr.test <- matrix(0, nrow=81, ncol=81)
for(i in 1:81){
for(j in 0:(81-i)){
cone.corr.test[i,j] <- cor(test[,i], test[, i+j])
}
}
test.cone <- melt(cone.corr.test)
test.cone <- test.cone %>% filter(value != 0)
test.cone$X <- test.cone$Var2 * 0.25
ggplot(data=test.cone, aes(x=X, y=value)) +
geom_point(alpha=0.1) +
geom_line(data=data.frame(x=X, y=cone.corr(X, 5, 1)),aes(x=x,y=y), col="red") +
geom_line(data=data.frame(x=X, y=cyl.corr(X, 5, 1)),aes(x=x,y=y), col="yellow") +
lims(x=c(0, 25)) +
theme_bw()
test.cone
head(test.cone)
test.cone %>% filter(X > 15)
hist(test.cone %>% filter(X > 15) %>% select(value))
test.cone %>% filter(X > 15) %>% select(value)
typeof(test.cone %>% filter(X > 15) %>% select(value))
hist(unlist(test.cone %>% filter(X > 15) %>% select(value)))
library(STLM)
X <- matrix(seq(0, 20, by=0.25), ncol=1)
test <- matrix(0, nrow=25000, ncol=81)
for(i in 1:25000){
test[i,] <- drawGammaRF_R(X, 2, 0.5, 5e-4, 5, sd=i)
}
cone.corr.test <- matrix(0, nrow=81, ncol=81)
for(i in 1:81){
for(j in 0:(81-i)){
cone.corr.test[i,j] <- cor(test[,i], test[, i+j])
}
}
test.cone <- melt(cone.corr.test)
test.cone <- test.cone %>% filter(value != 0)
test.cone$X <- test.cone$Var2 * 0.25
ggplot(data=test.cone, aes(x=X, y=value)) +
geom_point(alpha=0.1) +
geom_line(data=data.frame(x=X, y=cone.corr(X, 5, 1)),aes(x=x,y=y), col="red") +
geom_line(data=data.frame(x=X, y=cyl.corr(X, 5, 1)),aes(x=x,y=y), col="yellow") +
lims(x=c(0, 25)) +
theme_bw()
library(ggplot2)
library(reshape2)
library(dplyr)
test.cone <- melt(cone.corr.test)
test.cone <- test.cone %>% filter(value != 0)
test.cone$X <- test.cone$Var2 * 0.25
ggplot(data=test.cone, aes(x=X, y=value)) +
geom_point(alpha=0.1) +
geom_line(data=data.frame(x=X, y=cone.corr(X, 5, 1)),aes(x=x,y=y), col="red") +
geom_line(data=data.frame(x=X, y=cyl.corr(X, 5, 1)),aes(x=x,y=y), col="yellow") +
lims(x=c(0, 25)) +
theme_bw()
library(STLM)
X
drawGammaRF(X, 2, 0.5, 5e-4, R=5, corrStruct="Cone")
drawGammaRF(X, 2, 0.5, 5e-4, R=5, corrStruct="Cone")
drawGammaRF(X, 2, 0.5, 5e-4, R=5, corrStruct="Cone")
drawGammaRF(X, 2, 0.5, 5e-4, R=5, corrStruct="Cone")
drawGammaRF(X, 2, 0.5, 5e-4, R=5, corrStruct="Cone")
drawGammaRF(X, 2, 0.5, 5e-4, R=5, corrStruct="Cone")
drawGammaRF(X, 2, 0.5, 5e-4, R=5, corrStruct="Cone")
drawGammaRF(X, 2, 0.5, 5e-4, R=5, corrStruct="Cone")
drawGammaRF(X, 2, 0.5, 5e-4, R=5, corrStruct="Cone")
drawGammaRF(X, 2, 0.5, 5e-4, R=5, corrStruct="Cone")
drawGammaRF(X, 2, 0.5, 5e-4, R=5, corrStruct="Cone")
library(STLM)
drawGammaRF(X, 2, 0.5, 5e-4, R=5, corrStruct="Cone")
drawGammaRF(X, 2, 0.5, 5e-4, R=5, corrStruct="Cone")
X
library(STLM)
drawGammaRF(X, 2, 0.5, 5e-4, R=5, corrStruct="Cone")
plot(X,drawGammaRF(X, 2, 0.5, 5e-4, R=5, corrStruct="Cone"))
plot(X,drawGammaRF(X, 2, 0.5, 5e-4, R=5, corrStruct="Cone"))
plot(X,drawGammaRF(X, 2, 0.5, 5e-4, R=5, corrStruct="Cone"))
plot(X,drawGammaRF(X, 2, 0.5, 5e-4, R=5, corrStruct="Cone"))
plot(X,drawGammaRF(X, 2, 0.5, 5e-4, R=5, corrStruct="Cone"))
plot(X,drawGammaRF(X, 2, 0.5, 5e-4, R=5, corrStruct="Cone"))
plot(X,drawGammaRF(X, 2, 0.5, 5e-4, R=5, corrStruct="Cone"))
plot(X,drawGammaRF(X, 2, 0.5, 5e-4, R=5, corrStruct="Cone"))
plot(X,drawGammaRF(X, 2, 0.5, 5e-4, R=5, corrStruct="Cone"))
plot(X,drawGammaRF(X, 2, 0.5, 5e-4, R=5, corrStruct="Cone"))
library(STLM)
drawGammaRF(X, 2, 0.5, 5e-4, R=5, corrStruct="Cone")
library(STLM)
drawGammaRF(X, 2, 0.5, 5e-4, R=5, corrStruct="Cone")
library(STLM)
drawGammaRF(X, 2, 0.5, 5e-4, R=5, corrStruct="Cone")
library(STLM)
library(STLM)
drawGammaRF(X, 2, 0.5, 5e-4, R=5, corrStruct="Cone")
library(STLM)
drawGammaRF(X, 2, 0.5, 5e-4, R=5, corrStruct="Cone")
library(STLM)
cone_height1D(1, 1)
cone_height1D(0, 1)
cone_height1D(0.5, 1)
cone_height1D(0.25, 1)
cone_height1D(0.25, 2)
cone_height1D(0, 2)
cone_height1D(1, 2)
cone_height1D(1.99, 2)
cone_height1D(0.25, 2)
cone_height1D(-0.25, 2)
0.5-0.25*0.25
cone_height1D(-2, 2)
cone_height1D(-3, 2)
cone_height1D(-4, 2)
cone_height1D(-5, 2)
cone_height1D(-6, 2)
cone_height1D(8, 2)
cone_height1D(6, 2)
drawGammaRF(X, 2, 0.5, 5e-4, R=5, corrStruct="Cone")
library(STLM)
drawGammaRF(X, 2, 0.5, 5e-4, R=5, corrStruct="Cone")
junk <- drawGammaRF(X, 2, 0.5, 5e-4, R=5, corrStruct="Cone")
plot(X, junk)
junk <- drawGammaRF(X, 2, 0.5, 5e-4, R=5, corrStruct="Cone")
plot(X, junk)
junk <- drawGammaRF(X, 2, 0.5, 5e-4, R=5, corrStruct="Cone")
plot(X, junk)
library(STLM)
junk <- drawGammaRF(X, 2, 0.5, 5e-4, R=5, corrStruct="Cone")
library(STLM)
junk <- drawGammaRF(X, 2, 0.5, 5e-4, R=5, corrStruct="Cone")
plot(X, junk)
junk2 <- drawGammaRF(X, 2, 0.5, 5e-4, R=5, corrStruct="Cylinder")
plot(X, junk2)
library(microbenchmark)
microbenchmark(drawGammaRF(X, 2, 0.5, 5e-4, R=5, corrStruct="Cone"))
microbenchmark(drawGammaRF(X, 2, 0.5, 5e-4, R=5, corrStruct="Cylinder"))
microbenchmark(drawGammaRF_R(X, 2, 0.5, 5e-4, 5))
X <- matrix(seq(0, 20, by=0.25), ncol=1)
test <- matrix(0, nrow=25000, ncol=81)
for(i in 1:25000){
# test[i,] <- drawGammaRF_R(X, 2, 0.5, 5e-4, 5, sd=i)
test[i,] <- drawGammaRF(X, 2, 0.5, 5e-4, 5, corrStruct="Cylinder", sd=i)
}
cone.corr.test <- matrix(0, nrow=81, ncol=81)
for(i in 1:81){
for(j in 0:(81-i)){
cone.corr.test[i,j] <- cor(test[,i], test[, i+j])
}
}
test.cone <- melt(cone.corr.test)
test.cone <- test.cone %>% filter(value != 0)
test.cone$X <- test.cone$Var2 * 0.25
ggplot(data=test.cone, aes(x=X, y=value)) +
geom_point(alpha=0.1) +
geom_line(data=data.frame(x=X, y=cone.corr(X, 5, 1)),aes(x=x,y=y), col="red") +
geom_line(data=data.frame(x=X, y=cyl.corr(X, 5, 1)),aes(x=x,y=y), col="yellow") +
lims(x=c(0, 25)) +
theme_bw()
X <- matrix(seq(0, 20, by=0.25), ncol=1)
test <- matrix(0, nrow=25000, ncol=81)
for(i in 1:25000){
# test[i,] <- drawGammaRF_R(X, 2, 0.5, 5e-4, 5, sd=i)
test[i,] <- drawGammaRF(X, 2, 0.5, 5e-4, 5, corrStruct="Cone", sd=i)
}
cone.corr.test <- matrix(0, nrow=81, ncol=81)
for(i in 1:81){
for(j in 0:(81-i)){
cone.corr.test[i,j] <- cor(test[,i], test[, i+j])
}
}
test.cone <- melt(cone.corr.test)
test.cone <- test.cone %>% filter(value != 0)
test.cone$X <- test.cone$Var2 * 0.25
ggplot(data=test.cone, aes(x=X, y=value)) +
geom_point(alpha=0.1) +
geom_line(data=data.frame(x=X, y=cone.corr(X, 5, 1)),aes(x=x,y=y), col="red") +
geom_line(data=data.frame(x=X, y=cyl.corr(X, 5, 1)),aes(x=x,y=y), col="yellow") +
lims(x=c(0, 25)) +
theme_bw()
ggplot(data=test.cone, aes(x=X, y=value)) +
geom_point(alpha=0.05) +
geom_line(data=data.frame(x=X, y=cone.corr(X, 5, 1)),aes(x=x,y=y), col="red") +
geom_line(data=data.frame(x=X, y=cyl.corr(X, 5, 1)),aes(x=x,y=y), col="yellow") +
lims(x=c(0, 25)) +
theme_bw()
ggplot(data=test.cone, aes(x=X, y=value)) +
geom_point(alpha=0.01) +
geom_line(data=data.frame(x=X, y=cone.corr(X, 5, 1)),aes(x=x,y=y), col="red") +
geom_line(data=data.frame(x=X, y=cyl.corr(X, 5, 1)),aes(x=x,y=y), col="yellow") +
lims(x=c(0, 25)) +
theme_bw()
plot(X, test[1,])
plot(X, test[2,])
plot(X, test[3,])
plot(X, test[5,])
plot(X, test[20,])
hist(test[,81], freq=FALSE)
hist(test[,81], freq=FALSE, breaks=25)
lines(seq(0.1, 25, by=0.1), dgamma(seq(0.1, 25, by=0.1), 2, 0.5), col="red")
hist(test[,40], freq=FALSE, breaks=25)
lines(seq(0.1, 25, by=0.1), dgamma(seq(0.1, 25, by=0.1), 2, 0.5), col="red")
hist(test[,20], freq=FALSE, breaks=25)
lines(seq(0.1, 25, by=0.1), dgamma(seq(0.1, 25, by=0.1), 2, 0.5), col="red")
hist(test[,30], freq=FALSE, breaks=25)
lines(seq(0.1, 25, by=0.1), dgamma(seq(0.1, 25, by=0.1), 2, 0.5), col="red")
cor(test[,30], test[,31])
cone.corr(0.25, 5, 1)
cor(test[,31], test[,32])
ggplot(data=test.cone, aes(x=X, y=value)) +
geom_point(alpha=0.01) +
geom_line(data=data.frame(x=X, y=cone.corr(X, 5, 1)),aes(x=x,y=y), col="red") +
geom_line(data=data.frame(x=X, y=cyl.corr(X, 5, 1)),aes(x=x,y=y), col="yellow") +
lims(x=c(0, 25)) +
theme_bw()
library(STLM)
X <- expand.grid(1:100, 1:100)
X
test <- drawGammaRF(X, 2, 0.5, 1e-3, 20)
ncol(X)
as.matrix(dist(X))
X <- expand.grid(1:10, 1:10)
as.matrix(dist(X))
?dist
X
junk <- as.matrix(dist(X))
junk
X
junk
sqrt(162)
test <- drawGammaRF(X, 2, 0.5, 1e-3, 20, corrStruct = "Cylinder")
X <- as.matrix(expand.grid(1:100, 1:100))
X <- as.matrix(expand.grid(1:10, 1:10))
test <- drawGammaRF(X, 2, 0.5, 1e-3, 2)
test
X <- as.matrix(expand.grid(1:100, 1:100))
test <- drawGammaRF(X, 2, 0.5, 1e-3, 20)
test
plot(test)
test <- drawGammaRF(X, 2, 0.5, 1e-3, 20)
summary(test)
plot(test)
microbenchmark(drawGammaRF(X, 2, 0.5, 1e-3, 20))
microbenchmark(drawGammaRF(X, 2, 0.5, 1e-3, 20), times=10)
X <- as.matrix(expand.grid(1:20, 1:20))
test <- drawGammaRF(X, 2, 0.5, 1e-3, 20)
test
microbenchmark(drawGammaRF(X, 2, 0.5, 1e-3, 20), times=10)
10000 / 400
23*25
library(STLM)
X <- as.matrix(expand.grid(1:10, 1:10))
X
drawGammaRF_2D_Cyl_R(X, 2, 0.5, 1e-3, 5)
library(STLM)
drawGammaRF_2D_Cyl_R(X, 2, 0.5, 1e-3, 5)
library(STLM)
drawGammaRF_2D_Cyl_R(X, 2, 0.5, 1e-3, 5)
a <- 2
b <- 0.5
eps <- 1e-3
R <- 5
distMatrix <- as.matrix(dist(X))
nSpatial <- 4 # mass value, x, y, h
nLoc <- nrow(X)
mult <- 1000
# Storage for Levy mass "jumps"
mass.pts <- matrix(0, nrow=mult*nLoc, ncol=nSpatial)
num.added <- rep(0, nLoc)
total.mass.pts <- 0
levy.draws <- drawGamma(10, a, b, eps)
num.draws <- sum(levy.draws > 0)
draw.radius <- sqrt(runif(num.draws, 0, R))
draw.angle <- runif(num.draws, 0, 2*pi)
draw.loc <- matrix(0, nrow=num.draws, ncol=2)
draw.loc[,1] <- X[1,1] + draw.radius*cos(draw.angle)
draw.loc[,2] <- X[1,2] + draw.radius*sin(draw.angle)
draw.loc
mass.pts[(total.mass.pts+1):(total.mass.pts+num.draws), 1] <- levy.draws[1:num.draws]
mass.pts[(total.mass.pts+1):(total.mass.pts+num.draws), 2:3] <- draw.loc
num.added[1] <- num.draws
total.mass.pts <- total.mass.pts + num.draws
i <- 2
levy.draws <- drawGamma(10, a, b, eps)
num.draws  <- sum(levy.draws > 0)
draw.radius <- sqrt(runif(num.draws, 0, R))
draw.angle <- runif(num.draws, 0, 2*pi)
draw.loc <- matrix(0, nrow=num.draws, ncol=2)
draw.loc[,1] <- X[i,1] + draw.radius*cos(draw.angle)
draw.loc[,2] <- X[i,2] + draw.radius*sin(draw.angle)
#draw.height <- runif(num.draws, 0, (R - abs(draw.loc - X[i,1])) / R^2)
valid.new.pt <- rep(TRUE, num.draws)
# Check previous locations whether new mass positions fall in those location's shapes
for(j in 1:(i-1)){
valid.new.pt <- valid.new.pt & !(((draw.loc[,1]-X[j,1])^2 + (draw.loc[,1]-X[j,2])^2) < R^2)
}
num.new <- sum(valid.new.pt)
num.added[i] <- num.new
if(num.new > 0){
mass.pts[(total.mass.pts+1):(total.mass.pts+num.new), 1] <- levy.draws[1:num.draws][valid.new.pt]
mass.pts[(total.mass.pts+1):(total.mass.pts+num.new), 2] <- draw.loc[valid.new.pt]
mass.pts[(total.mass.pts+1):(total.mass.pts+num.new), 3] <- draw.height[valid.new.pt]
total.mass.pts <- total.mass.pts + num.new
}
i <- 3
levy.draws <- drawGamma(10, a, b, eps)
num.draws  <- sum(levy.draws > 0)
draw.radius <- sqrt(runif(num.draws, 0, R))
draw.angle <- runif(num.draws, 0, 2*pi)
draw.loc <- matrix(0, nrow=num.draws, ncol=2)
draw.loc[,1] <- X[i,1] + draw.radius*cos(draw.angle)
draw.loc[,2] <- X[i,2] + draw.radius*sin(draw.angle)
#draw.height <- runif(num.draws, 0, (R - abs(draw.loc - X[i,1])) / R^2)
valid.new.pt <- rep(TRUE, num.draws)
# Check previous locations whether new mass positions fall in those location's shapes
for(j in 1:(i-1)){
valid.new.pt <- valid.new.pt & !(((draw.loc[,1]-X[j,1])^2 + (draw.loc[,1]-X[j,2])^2) < R^2)
}
num.new <- sum(valid.new.pt)
num.added[i] <- num.new
if(num.new > 0){
mass.pts[(total.mass.pts+1):(total.mass.pts+num.new), 1] <- levy.draws[1:num.draws][valid.new.pt]
mass.pts[(total.mass.pts+1):(total.mass.pts+num.new), 2] <- draw.loc[valid.new.pt]
mass.pts[(total.mass.pts+1):(total.mass.pts+num.new), 3] <- draw.height[valid.new.pt]
total.mass.pts <- total.mass.pts + num.new
}
i <- 4
levy.draws <- drawGamma(10, a, b, eps)
num.draws  <- sum(levy.draws > 0)
draw.radius <- sqrt(runif(num.draws, 0, R))
draw.angle <- runif(num.draws, 0, 2*pi)
draw.loc <- matrix(0, nrow=num.draws, ncol=2)
draw.loc[,1] <- X[i,1] + draw.radius*cos(draw.angle)
draw.loc[,2] <- X[i,2] + draw.radius*sin(draw.angle)
#draw.height <- runif(num.draws, 0, (R - abs(draw.loc - X[i,1])) / R^2)
valid.new.pt <- rep(TRUE, num.draws)
# Check previous locations whether new mass positions fall in those location's shapes
for(j in 1:(i-1)){
valid.new.pt <- valid.new.pt & !(((draw.loc[,1]-X[j,1])^2 + (draw.loc[,1]-X[j,2])^2) < R^2)
}
num.new <- sum(valid.new.pt)
num.added[i] <- num.new
if(num.new > 0){
mass.pts[(total.mass.pts+1):(total.mass.pts+num.new), 1] <- levy.draws[1:num.draws][valid.new.pt]
mass.pts[(total.mass.pts+1):(total.mass.pts+num.new), 2] <- draw.loc[valid.new.pt]
mass.pts[(total.mass.pts+1):(total.mass.pts+num.new), 3] <- draw.height[valid.new.pt]
total.mass.pts <- total.mass.pts + num.new
}
library(STLM)
X
drawGammaRF_2D_Cyl_R(X, 2, 0.5, 1e-3, 5)
X <- as.matrix(expand.grid(1:100, 1:100))
drawGammaRF_2D_Cyl_R(X, 2, 0.5, 1e-3, 5)
